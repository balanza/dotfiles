#!/bin/bash

machine_name=${1?:required argument}
if [ -z "$machine_name" ]; then
  echo "Usage: $0 <machine_name>"
  exit 1
fi  


source_dir="$(pwd)/machines/$machine_name"
echo "Source directory: $source_dir"


pushd "$source_dir" > /dev/null || { echo "Directory $source_dir does not exist."; exit 1; }

link_file() {
    source_file=${1?required argument}
    target_file=${2?required argument}
    if [ -f "$source_file" ]; then
        echo "Linking $source_file --> $target_file"
        ln -sf "$source_file" "$target_file"
    else
        echo "Warning: $source_file does not exist"
    fi
}

exec_lifecycle() {
    if [ -f "$1" ]; then
        echo ">>> Executing lifecycle script: $1"
        bash -c "./$1" || {
            echo "Error executing lifecycle script $1"
            exit 1
        }
    else
        echo "Warning: Lifecycle script $1 does not exist"
    fi
}

dconf_load() {
    settings_dir=${1?required argument}
    # Check if dconf is installed
    if ! command -v dconf &> /dev/null; then
        echo "dconf is not installed. Skipping GNOME setup."
    else
        # Backup existing GNOME settings
        echo "Backing up existing GNOME settings..."
        dconf dump /org/gnome/ > /tmp/gnome-settings-backup.txt

        settings=$(find $settings_dir -type f -name ".settings")
        for setting in $settings; do
            echo "Linking GNOME setting: $setting"
            dconf load "/org/gnome/$(dirname $setting)" < "$settings_dir/$setting" || {
                echo "Error loading GNOME setting $setting"
                dconf load /org/gnome/ < "/tmp/gnome-settings-backup.txt" 
                exit 1
            }
        done

        rm -f /tmp/gnome-settings-backup.txt

    fi
}

exec_lifecycle "pre-link"

if [ -d "./zsh" ]; then
    echo ">>> Setup ZSH"
    # Check if zsh is installed
    if ! command -v zsh &> /dev/null; then
        echo "Zsh is not installed. Skipping ZSH setup."
    else
        # Check if oh-my-zsh is installed
        if [ ! -d "$HOME/.oh-my-zsh" ]; then
            echo "Installing oh-my-zsh..."``
            sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        else
            echo "oh-my-zsh is already installed, skipping."             
        fi

        files=(".zshrc" ".zsh_aliases" ".zsh_functions")
        for file in "${files[@]}"; do
            link_file "$(pwd)/zsh/$file" "$HOME/$(basename "$file")"
        done

        # Set ZSH as the default shell if not already set
        if [ "$SHELL" != "$(which zsh)" ]; then
            echo "Setting ZSH as the default shell"
        fi
    fi
fi

if [ -d "./git" ]; then
    echo ">>> Setup Git"
    files=(".gitconfig" ".suse-gitconfig")
    for file in "${files[@]}"; do
        link_file "$(pwd)/git/$file" "$HOME/$(basename "$file")"
    done
fi

if [ -d "./distrobox" ]; then
    echo ">>> Setup Distrobox"
    link_file "$(pwd)/distrobox/distrobox.ini" "$HOME/distrobox.ini"
fi

if [ -d "./vim" ]; then
    echo ">>> Setup VIM"
    files=(".vimrc" ".viminfo")
    for file in "${files[@]}"; do
        link_file "$(pwd)/vim/$file" "$HOME/$(basename "$file")"
    done
fi

if [ -d "./vscode-flatpak" ]; then
    echo ">>> Setup VSCODE"
    if [ -d "$HOME/.var/app/com.visualstudio.code/config/Code/User" ]; then
        files=("settings.json" "keybindings.json")
        for file in "${files[@]}"; do
            link_file "$(pwd)/vscode-flatpak/$file" "$HOME/.var/app/com.visualstudio.code/config/Code/User/$(basename "$file")"
        done
    else
        echo "Warning: VSCode flatpak configuration directory does not exist."
    fi
fi

if [ -d "./gnome" ]; then
    echo ">>> Setup GNOME"

    if [ -d "./gnome/dconf" ] ; then
        dconf_load "$(pwd)/gnome/dconf"
    fi
    
fi

exec_lifecycle "post-link"


popd > /dev/null || { echo "Failed to return to the previous directory."; exit 1; }
