#!/bin/bash

machine_name=${1?:required argument}
if [ -z "$machine_name" ]; then
  echo "Usage: $0 <machine_name>"
  exit 1
fi  


source_dir="$(pwd)/machines/$machine_name"
echo "Source directory: $source_dir"


pushd "$source_dir" > /dev/null || { echo "Directory $source_dir does not exist."; exit 1; }

link_file() {
    source_file=${1?required argument}
    target_file=${2?required argument}
    if [ -f "$source_file" ]; then
        echo "Linking $source_file --> $target_file"
        ln -sf "$source_file" "$target_file"
    else
        echo "Warning: $source_file does not exist"
    fi
}

if [ -d "./zsh" ]; then
    echo ">>> Setup ZSH"
    # Check if zsh is installed
    if ! command -v zsh &> /dev/null; then
        echo "Zsh is not installed. Skipping ZSH setup."
    else
        # Check if oh-my-zsh is installed
        if [ ! -d "$HOME/.oh-my-zsh" ]; then
            echo "Installing oh-my-zsh..."
            sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        else
            echo "oh-my-zsh is already installed, skipping."             
        fi

        files=(".zshrc" ".zsh_aliases" ".zsh_functions")
        for file in "${files[@]}"; do
            link_file "$(pwd)/zsh/$file" "$HOME/$(basename "$file")"
        done

        # Set ZSH as the default shell if not already set
        if [ "$SHELL" != "$(which zsh)" ]; then
            echo "Setting ZSH as the default shell"
            chsh -s "$(which zsh)"
            echo "Please log out and log back in to apply the changes.
        fi
    fi
fi

if [ -d "./git" ]; then
    echo ">>> Setup Git"
    files=(".gitconfig" ".suse-gitconfig")
    for file in "${files[@]}"; do
        link_file "$(pwd)/git/$file" "$HOME/$(basename "$file")"
    done
fi

if [ -d "./distrobox" ]; then
    echo ">>> Setup Distrobox"
    link_file "$(pwd)/distrobox/distrobox.ini" "$HOME/distrobox.ini"
fi

if [ -d "./vim" ]; then
    echo ">>> Setup VIM"
    files=(".vimrc" ".viminfo")
    for file in "${files[@]}"; do
        link_file "$(pwd)/vim/$file" "$HOME/$(basename "$file")"
    done
fi


popd > /dev/null || { echo "Failed to return to the previous directory."; exit 1; }
